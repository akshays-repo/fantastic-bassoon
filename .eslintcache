[{"/home/akshays/programs/riolabz-task/src/reportWebVitals.js":"1","/home/akshays/programs/riolabz-task/src/Container/index.js":"2","/home/akshays/programs/riolabz-task/src/App.js":"3","/home/akshays/programs/riolabz-task/src/Components/WebsiteHeader/index.js":"4","/home/akshays/programs/riolabz-task/src/Components/WebsiteFooter/index.js":"5","/home/akshays/programs/riolabz-task/src/index.js":"6","/home/akshays/programs/riolabz-task/src/Container/Card/index.js":"7"},{"size":362,"mtime":1606750058659,"results":"8","hashOfConfig":"9"},{"size":3534,"mtime":1606911088813,"results":"10","hashOfConfig":"9"},{"size":371,"mtime":1606753009165,"results":"11","hashOfConfig":"9"},{"size":492,"mtime":1606753249380,"results":"12","hashOfConfig":"9"},{"size":260,"mtime":1606909812778,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1606750058659,"results":"14","hashOfConfig":"9"},{"size":796,"mtime":1606909055394,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dr82o",{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/akshays/programs/riolabz-task/src/reportWebVitals.js",[],"/home/akshays/programs/riolabz-task/src/Container/index.js",["31","32","33","34","35","36","37","38","39"],"import React, { useState } from \"react\";\nimport { Container, Row, Col ,Form ,FormGroup , Label ,Input, Button} from \"reactstrap\";\nimport { AvForm, AvField, AvGroup, AvInput, AvFeedback, AvRadioGroup, AvRadio, AvCheckboxGroup, AvCheckbox } from 'availity-reactstrap-validation';\nimport CardComponent from \"./Card\";\nimport \"./style.scss\"\nconst HomePage = () => {\n    const [formData , setFormData] = useState ({\n      useremailid:'',\n      username:'',\n      userid:''\n    })\n    const [errorMsg,  setErrorMsg] = useState(false)\n  const [usersList, setUsersList] = useState([])\n\n    // fuction for handle change\n   const handleChange = (event) =>{\n    setFormData((formData) => ({\n      ...formData,\n      [event.target.name]: event.target.value\n    }))}\n\n    // function for clear form\n   const clearForm = () =>{\n    setFormData((formData) => ({\n      ...formData,useremailid:'', username:'', userid:usersList.length}))\n   }\n\n   const deleteUser = (userid) =>{\n    setUsersList(usersList.filter((user) => user.userid !== userid))\n  }\n\n   const onSubmit = (event) =>{\n    event.preventDefault();\n    if (formData.useremailid==='' ||\t formData.username === ''){\n      setErrorMsg(true)\n    }else{\n      setUsersList((usersList) =>([...usersList,formData ]))\n      clearForm()\n    }\n      \n    }\n\n   const upDateUser = (userid) =>{\n    const ClickedUser = usersList.filter(user => user.userid === userid)\n    setFormData((formData) => ({...formData,\n      useremailid:ClickedUser[0].useremailid ,\n      username:ClickedUser[0].username , \n      userid:ClickedUser[0].userid}));\n      deleteUser(userid)\n   }\n  const DisplayErrorMsg =() =>{\n    if (errorMsg) {\n      return(\n        <div>\n          <p style={{color:\"red\"}}> error , please check the input </p>\n        </div>\n      )\n      \n    }\n  }\n\n  return (\n    <div className=\"home-page section-padding\">\n      <Container style={{paddingTop:\"100px\" , paddingBottom:\"100px\"}}>\n        <Row>\n          <Col md={6}>\n            {DisplayErrorMsg()}\n            <Form>\n              <FormGroup>\n                <Label for=\"name\">Enter the Name</Label>\n                <Input \n                  type=\"name\"\n                  name=\"username\"\n                  id=\"name\"\n                  required\n                  onChange={handleChange}\n                  value={formData.username}\n                />\n              </FormGroup>\n              <FormGroup>\n              <Label for=\"exampleEmail\">Email Id</Label>\n                <Input \n                  type=\"email\"\n                  name=\"useremailid\"\n                  id=\"Email\"\n                  onChange={handleChange}\n                  value={formData.useremailid}\n                />\n              </FormGroup>\n              <div>\n              <Button  className=\"button\" onClick={onSubmit}>Submit</Button>\n\n              </div>\n              <div>\n              <Button className=\"button\" onClick={clearForm}>Clear</Button>\n\n              </div>\n\n\n            </Form>\n          </Col>\n          <Col md={6}>\n          {usersList && (usersList.map((user) => (\n                    <div key={user.userid} className='p-3'>\n                      <CardComponent \n                      name={user.username} \n                      email={user.useremailid} \n                      userid={user.userid} \n                      upDateUser={upDateUser}\n                      deleteUser={deleteUser}/>\n                      </div> \n            )))}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\nexport default HomePage;\n\n","/home/akshays/programs/riolabz-task/src/App.js",[],"/home/akshays/programs/riolabz-task/src/Components/WebsiteHeader/index.js",["40","41"],"/home/akshays/programs/riolabz-task/src/Components/WebsiteFooter/index.js",[],"/home/akshays/programs/riolabz-task/src/index.js",[],"/home/akshays/programs/riolabz-task/src/Container/Card/index.js",[],{"ruleId":"42","severity":1,"message":"43","line":3,"column":10,"nodeType":"44","messageId":"45","endLine":3,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":3,"column":18,"nodeType":"44","messageId":"45","endLine":3,"endColumn":25},{"ruleId":"42","severity":1,"message":"47","line":3,"column":27,"nodeType":"44","messageId":"45","endLine":3,"endColumn":34},{"ruleId":"42","severity":1,"message":"48","line":3,"column":36,"nodeType":"44","messageId":"45","endLine":3,"endColumn":43},{"ruleId":"42","severity":1,"message":"49","line":3,"column":45,"nodeType":"44","messageId":"45","endLine":3,"endColumn":55},{"ruleId":"42","severity":1,"message":"50","line":3,"column":57,"nodeType":"44","messageId":"45","endLine":3,"endColumn":69},{"ruleId":"42","severity":1,"message":"51","line":3,"column":71,"nodeType":"44","messageId":"45","endLine":3,"endColumn":78},{"ruleId":"42","severity":1,"message":"52","line":3,"column":80,"nodeType":"44","messageId":"45","endLine":3,"endColumn":95},{"ruleId":"42","severity":1,"message":"53","line":3,"column":97,"nodeType":"44","messageId":"45","endLine":3,"endColumn":107},{"ruleId":"42","severity":1,"message":"54","line":10,"column":9,"nodeType":"44","messageId":"45","endLine":10,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":16,"column":13,"nodeType":"57","endLine":16,"endColumn":38},"no-unused-vars","'AvForm' is defined but never used.","Identifier","unusedVar","'AvField' is defined but never used.","'AvGroup' is defined but never used.","'AvInput' is defined but never used.","'AvFeedback' is defined but never used.","'AvRadioGroup' is defined but never used.","'AvRadio' is defined but never used.","'AvCheckboxGroup' is defined but never used.","'AvCheckbox' is defined but never used.","'toggle' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]